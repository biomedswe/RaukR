---
title: "Tidyverse"
format: html
editor: visual
---

```{r}
f <- . %>% sin() %>% cos()
7 %>% f
```

### **1.1 Pipes**

#### **1.1.1 Chunk 1**

Rewrite the following code chunks as pipes (Load package `magrittr` because `tidyverse` supports only the `%>%` pipe!):

```{r}
library(magrittr)
```

```{r}
my_cars <- mtcars[, c(1:4, 10)]
my_cars <- my_cars[my_cars$disp > mean(my_cars$disp), ]
my_cars <- colMeans(my_cars)

my_cars_colMeans <- mtcars %>% 
  select(1:4, 10) %>% 
  filter(disp > mean(disp)) %>% 
  colMeans()
```

#### **1.1.2 Chunk 2**

The `summary(x)` function is a bit special: when you type `summary(x)` in the console, `print` is called in an implicit way. Pipe call does not do such implicite call, so you will have to invoke `print` in an explicit way. But the `%T>%` does unbranch for one call only, you will have to make printing of the `summary` a one single composed call using `{}`. Try to wrap your mind around this. If in doubt, turn to a TA.

```{r}
summary(cars)
cars %>% summary() %>% colSums()

# summary is an argument to print: print(cars, summary(cars))
cars %T>% {print(summary(.))} %>% colSums()



```

#### **1.1.3 Chunk 3**

Rewrite the following correlations using pipes.

-   cor(mtcars\$gear, mtcars\$mpg)

```{r}
cor(mtcars$gear, mtcars$mpg)

# %$% adds $ before gear and mpg like mtcars$gear and mtcars$mpg
# also prevents iris to be inserted as the first argument like this: cor(iris, gear, mpg)
mtcars %$% cor(gear, mpg)

```

-   cor(mtcars)

```{r}
mtcars %>% cor()
```

```{r}
A <-  tibble(key = c("a", "b", "c", "e"), value = c("A1", "A2", "A3", "A4"))
B <-  tibble(key = c("a", "b", "c", "d"), value = c("B1", NA, "B3", "B4"))

A %>% inner_join(B, by = "key")
```

#### **1.1.4 Chunk 4**

Given is the `dim_summary(nrows, ncols)` function which takes `nrows` and `ncols` as arguments and prints this info:

```{r}
dim_summary <- function(nrows, ncols) {
  print(
    paste0('Matrix M has: ', nrows, ' rows and ', ncols, ' columns.')
  )
}
```

Rewrite each of the code chunks below using pipes:

```{r}
distr1 <- rnorm(16)
M <- matrix(distr1, ncol = 4)
plot(M)
M <- M + sample(M)
dim_summary(nrows = nrow(M), ncols = ncol(M))
```

**Solution:**

```{r}
rnorm(16) %>% matrix(ncol = 4) %T>% plot() %>% `+`(., sample(.)) 
```
